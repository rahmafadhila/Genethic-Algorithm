# -*- coding: utf-8 -*-
"""IF4202_1301180050

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aFiVsBxvBoEuAGdMJrFXyMH_SUa8vAWq
"""

import math
from copy import deepcopy
import random
import numpy as np

"""POPULASI"""

def kromosom(a):
   individu = []   
   for i in range(a):
     individu.append(random.randint(0, 1))

   return individu

def populasi(a, b):
  populasi = []
  for i in range(a):
    newindividu = kromosom(b)
    populasi.append(newindividu)

  return populasi

"""DECODE KROMOSOM"""

def encode(populasi, aX1, bX1, aX2, bX2, k):
	X1 = 0
	X2 = 0
	divX1 = 0
	divX2 = 0
	multiX1 = 0
	multiX2 = 0
	nilaiencode = []

	for i in range(len(populasi[k])):
		if i < len(populasi[k]) // 2:
			divX1 += 2**-(i + 1)
			multiX1 += populasi[k][i] * (2**-(i + 1))
		else:
			divX2 += 2**-(i - 2)
			multiX2 += populasi[k][i] * (2**-(i - 2))

			X1 = bX1 + (aX1 - bX1) / divX1 * multiX1
			X2 = bX2 + (aX2 - bX2) / divX2 * multiX2

	if X1 == 0 :
		X1 += 0.001
	if X2 == 0 :
		X2 += 0.001

	nilaiencode.append(X1)
	nilaiencode.append(X2)
 
	return nilaiencode

def encode2(populasi, aX1, bX1, aX2, bX2):
  allencode = []
  for i in range(len(populasi)):
    nilaiencode = encode(populasi, aX1, bX1, aX2, bX2, i)
    allencode.append(nilaiencode)

  return allencode

"""NILAI MINIMUM RUMUS PADA SOAL"""

def rumusSoal(hasilencode):
	h = []
	for i in range(0, len(hasilencode)):
		j = 0
		h.append(math.cos(hasilencode[i][j]) * math.sin(hasilencode[i][j+1]) - (hasilencode[i][j] / (hasilencode[i][j+1]**2 + 1)))
	 
	return h

"""NILAI FITNESS"""

def nilaiFitness(h, hasilencode):
  fitness = []
  for i in range(0, len(h)):
    j = 0
    fitness.append(-(h[i]))

  return fitness

"""PEMILIHAN ORANGTUA"""

def tournamentSelection(populasi, fitness, k):
	parent = []
	fitness2 = []
	populasi2 = []
	max = 0
	x = np.random.choice(range(len(populasi)), k, replace=False)
 
	for i in range(0, len(x)):
		fitness2.append(fitness[x[i]])
		populasi2.append(populasi[x[i]])
	
	for i in range(0, len(x)):
		max = i
		for j in range(i+1, len(x)-1):
			if fitness2[j] > fitness2[max]:
				max = j         
			ftemp = fitness2[i]
			fitness2[i] = fitness2[max]
			fitness2[max] = ftemp
			
			ptemp = populasi2[i]
			populasi2[i] = populasi2[max]
			populasi2[max] = ptemp
			
	parent.append(populasi2[0])
	parent.append(populasi2[1])
 
	return parent

"""CROSSOVER SINGLE-POINT"""

def crossover(p1, p2):
  probabilitas = random.uniform(0.0, 1.0) 
  if probabilitas <= 0.65:
    ibu = p1.copy()
    bapak = p2.copy()
    a = len(ibu) - 2 
    start = random.randint(1, a)
    anak1 = bapak[:start] + ibu[start:]
    anak2 = ibu[:start] + bapak[start:]
  else :
    anak1 = []
    anak2 = []
    
  return anak1, anak2

"""MUTASI"""

def mutasi(anak1, anak2):
  probabilitas = np.random.uniform()
  if probabilitas < 0.01:
    a1 = np.random.randint(0, (len(anak1)))
    a2 = np.random.randint(0, (len(anak2)))
    
    for i in range(0, len(anak1)-1):
      if a1 == i:
        if anak1[i] == 0:
          anak1[i] = 1
        else:
          anak1[i] = 0

      if a2 == i:
        if anak2[i] == 0:
          anak2[i] = 1
        else:
          anak2[i] = 0

  return anak1, anak2

"""PERGANTIAN GENERASI"""

def elitism(populasi, fitness):
  elitism = []
  
  for i in range(0, len(populasi)):
    max = i
    for j in range(i+1, len(populasi)-1):
      if fitness[j] > fitness[max]:
        max = j         
      ftemp = fitness[i]
      fitness[i] = fitness[max]
      fitness[max] = ftemp
      
      ptemp = populasi[i]
      populasi[i] = populasi[max]
      populasi[max] = ptemp
  
  elitism.append(populasi[0])
  elitism.append(populasi[1])
  
  return elitism

#MAIN PROGRAM
newpopulasi = populasi(50, 30)
parent = []
child1 = []
generasi = 0

for i in range(500):
  generasi += 1
  hasilencode = encode2(newpopulasi, -1, 2, -1, 1)
  nilaiminimum = rumusSoal(hasilencode)
  fitness = nilaiFitness(nilaiminimum, hasilencode)
  #print('Generasi ke-', (i+1))
  #print('Populasi : ', newpopulasi)
  #print('Fitness : ', fitness, '\n')
  e = elitism(newpopulasi, fitness)
  while (len(e)) < 50:
    k = (random.randint(2, len(newpopulasi)))
    parent = tournamentSelection(newpopulasi, fitness, k)
    child1, child2 = crossover(parent[0], parent[1])
    if (child1):
      child1m, child2m = mutasi(child1, child2)
      e.append(child1m)
      e.append(child2m)
  newpopulasi = e

hasilencode = encode2(newpopulasi, -1, 2, -1, 1)
nilaiminimum = rumusSoal(hasilencode)
fitness = nilaiFitness(nilaiminimum, hasilencode)
new = elitism(newpopulasi,fitness)
hasilencode = encode2(new, -1, 2, -1, 1)

print('Kromosom Terbaik : ', new[0])
print('Nilai X1 dan X2  : ', hasilencode[0])
print(-(fitness[0]))